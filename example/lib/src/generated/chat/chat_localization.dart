// This file is generated by the Google Sheets localization tool. Do not edit manually.
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart' as intl;

import 'chat_localization_de.dart';
import 'chat_localization_en.dart';
import 'chat_localization_es.dart';
import 'chat_localization_ru.dart';

// ignore_for_file: type=lint

/// Callers can lookup localized strings with an instance of ChatLocalization
/// returned by `ChatLocalization.of(context)`.
///
/// Applications need to include `ChatLocalization.delegate()` in their app's
/// `localizationDelegates` list, and the locales they support in the app's
/// `supportedLocales` list. For example:
///
/// ```dart
/// import 'chat/chat_localization.dart';
///
/// return MaterialApp(
///   localizationsDelegates: ChatLocalization.localizationsDelegates,
///   supportedLocales: ChatLocalization.supportedLocales,
///   home: MyApplicationHome(),
/// );
/// ```
///
/// ## Update pubspec.yaml
///
/// Please make sure to update your pubspec.yaml to include the following
/// packages:
///
/// ```yaml
/// dependencies:
///   # Internationalization support.
///   flutter_localizations:
///     sdk: flutter
///   intl: any # Use the pinned version from flutter_localizations
///
///   # Rest of dependencies
/// ```
///
/// ## iOS Applications
///
/// iOS applications define key application metadata, including supported
/// locales, in an Info.plist file that is built into the application bundle.
/// To configure the locales supported by your app, you’ll need to edit this
/// file.
///
/// First, open your project’s ios/Runner.xcworkspace Xcode workspace file.
/// Then, in the Project Navigator, open the Info.plist file under the Runner
/// project’s Runner folder.
///
/// Next, select the Information Property List item, select Add Item from the
/// Editor menu, then select Localizations from the pop-up menu.
///
/// Select and expand the newly-created Localizations item then, for each
/// locale your application supports, add a new item and select the locale
/// you wish to add from the pop-up menu in the Value field. This list should
/// be consistent with the languages listed in the ChatLocalization.supportedLocales
/// property.
abstract class ChatLocalization {
  ChatLocalization(String locale)
      : localeName = intl.Intl.canonicalizedLocale(locale.toString());

  final String localeName;

  static ChatLocalization of(BuildContext context) {
    return Localizations.of<ChatLocalization>(context, ChatLocalization)!;
  }

  static const LocalizationsDelegate<ChatLocalization> delegate =
      _ChatLocalizationDelegate();

  /// A list of this localizations delegate along with the default localizations
  /// delegates.
  ///
  /// Returns a list of localizations delegates containing this delegate along with
  /// GlobalMaterialLocalizations.delegate, GlobalCupertinoLocalizations.delegate,
  /// and GlobalWidgetsLocalizations.delegate.
  ///
  /// Additional delegates can be added by appending to this list in
  /// MaterialApp. This list does not have to be used at all if a custom list
  /// of delegates is preferred or required.
  static const List<LocalizationsDelegate<dynamic>> localizationsDelegates =
      <LocalizationsDelegate<dynamic>>[
    delegate,
    GlobalMaterialLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
  ];

  /// A list of this localizations delegate's supported locales.
  static const List<Locale> supportedLocales = <Locale>[
    Locale('de'),
    Locale('en'),
    Locale('es'),
    Locale('ru')
  ];

  /// No description provided for @title.
  ///
  /// In en, this message translates to:
  /// **'Chat'**
  String get title;

  /// No description provided for @drawerTooltipNotifications.
  ///
  /// In en, this message translates to:
  /// **'Notifications'**
  String get drawerTooltipNotifications;

  /// No description provided for @drawerTooltipHelp.
  ///
  /// In en, this message translates to:
  /// **'Help'**
  String get drawerTooltipHelp;

  /// No description provided for @drawerTooltipClose.
  ///
  /// In en, this message translates to:
  /// **'Close'**
  String get drawerTooltipClose;

  /// No description provided for @drawerSectionTitleAccount.
  ///
  /// In en, this message translates to:
  /// **'Account'**
  String get drawerSectionTitleAccount;

  /// No description provided for @drawerSectionProfile.
  ///
  /// In en, this message translates to:
  /// **'Profile'**
  String get drawerSectionProfile;

  /// No description provided for @drawerSectionAccountSettings.
  ///
  /// In en, this message translates to:
  /// **'Account Settings'**
  String get drawerSectionAccountSettings;

  /// No description provided for @drawerSectionDonateToSupport.
  ///
  /// In en, this message translates to:
  /// **'Donate to Support'**
  String get drawerSectionDonateToSupport;

  /// No description provided for @drawerSectionSubscription.
  ///
  /// In en, this message translates to:
  /// **'Subscription'**
  String get drawerSectionSubscription;

  /// No description provided for @drawerSectionTitleChats.
  ///
  /// In en, this message translates to:
  /// **'Chats'**
  String get drawerSectionTitleChats;

  /// No description provided for @drawerSectionChatHistory.
  ///
  /// In en, this message translates to:
  /// **'Chat History'**
  String get drawerSectionChatHistory;

  /// No description provided for @drawerSectionAttachedDocuments.
  ///
  /// In en, this message translates to:
  /// **'Attached Documents'**
  String get drawerSectionAttachedDocuments;

  /// No description provided for @drawerSectionTitleHowToUse.
  ///
  /// In en, this message translates to:
  /// **'How to Use'**
  String get drawerSectionTitleHowToUse;

  /// No description provided for @drawerSectionVideoTutorials.
  ///
  /// In en, this message translates to:
  /// **'Video Tutorials'**
  String get drawerSectionVideoTutorials;

  /// No description provided for @drawerSectionTitleLegal.
  ///
  /// In en, this message translates to:
  /// **'Legal'**
  String get drawerSectionTitleLegal;

  /// No description provided for @drawerSectionContactUs.
  ///
  /// In en, this message translates to:
  /// **'Contact Us'**
  String get drawerSectionContactUs;

  /// No description provided for @drawerSectionBugReport.
  ///
  /// In en, this message translates to:
  /// **'Bug Report'**
  String get drawerSectionBugReport;

  /// No description provided for @drawerSectionTermsAndConditions.
  ///
  /// In en, this message translates to:
  /// **'Terms & Conditions'**
  String get drawerSectionTermsAndConditions;

  /// No description provided for @drawerSectionPrivacyPolicy.
  ///
  /// In en, this message translates to:
  /// **'Privacy Policy'**
  String get drawerSectionPrivacyPolicy;

  /// No description provided for @drawerSectionTitleFeedback.
  ///
  /// In en, this message translates to:
  /// **'Feedback'**
  String get drawerSectionTitleFeedback;

  /// No description provided for @drawerSectionRateApp.
  ///
  /// In en, this message translates to:
  /// **'Rate App'**
  String get drawerSectionRateApp;

  /// No description provided for @drawerSectionShareWithFriends.
  ///
  /// In en, this message translates to:
  /// **'Share with Friends'**
  String get drawerSectionShareWithFriends;

  /// No description provided for @drawerButtonLogOut.
  ///
  /// In en, this message translates to:
  /// **'Log Out'**
  String get drawerButtonLogOut;

  /// No description provided for @drawerBannerHelpOthersReceiveMedicalCare.
  ///
  /// In en, this message translates to:
  /// **'Help others receive medical care'**
  String get drawerBannerHelpOthersReceiveMedicalCare;

  /// Если нет имени пользователя, емейла, телефона - по умолчанию.
  ///
  /// In en, this message translates to:
  /// **'User'**
  String get drawerPlaceholderUser;

  /// No description provided for @drawerSubscriptionLabelPremiumFeaturesWithDoctorina.
  ///
  /// In en, this message translates to:
  /// **'Premium Features\nwith Doctorina'**
  String get drawerSubscriptionLabelPremiumFeaturesWithDoctorina;

  /// No description provided for @drawerSubscriptionButtonGetPremiumFeatures.
  ///
  /// In en, this message translates to:
  /// **'Get'**
  String get drawerSubscriptionButtonGetPremiumFeatures;

  /// Надпись перед иконками социальных сетей
  ///
  /// In en, this message translates to:
  /// **'Join Us'**
  String get drawerLabelJoinUs;

  /// Подсказка при наведении на версию приложения
  ///
  /// In en, this message translates to:
  /// **'App version:'**
  String get drawerTooltipVersion;

  /// Подсказка в поле ввода чата
  ///
  /// In en, this message translates to:
  /// **'Enter message'**
  String get chatInputHintEnterMessage;

  /// No description provided for @chatInputTooltipAttachFile.
  ///
  /// In en, this message translates to:
  /// **'Attach file'**
  String get chatInputTooltipAttachFile;

  /// No description provided for @chatInputTooltipDictateMessage.
  ///
  /// In en, this message translates to:
  /// **'Dictate message'**
  String get chatInputTooltipDictateMessage;

  /// No description provided for @chatInputTooltipSendMessage.
  ///
  /// In en, this message translates to:
  /// **'Send message'**
  String get chatInputTooltipSendMessage;

  /// No description provided for @chatListSnackBarErrorFailedToFetchMessages.
  ///
  /// In en, this message translates to:
  /// **'Failed to fetch messages'**
  String get chatListSnackBarErrorFailedToFetchMessages;

  /// No description provided for @chatListLabelErrorFailedToFetchMessagesPleaseTryAgain.
  ///
  /// In en, this message translates to:
  /// **'Failed to fetch messages. Please try again.'**
  String get chatListLabelErrorFailedToFetchMessagesPleaseTryAgain;

  /// No description provided for @chatListTooltipFetchMessages.
  ///
  /// In en, this message translates to:
  /// **'Fetch messages'**
  String get chatListTooltipFetchMessages;

  /// No description provided for @chatListLabelNoMessagesAvailable.
  ///
  /// In en, this message translates to:
  /// **'No messages available.\nPlease send a message to start the conversation.'**
  String get chatListLabelNoMessagesAvailable;

  /// No description provided for @chatListHasConnection.
  ///
  /// In en, this message translates to:
  /// **'Connected'**
  String get chatListHasConnection;

  /// No description provided for @chatListNoConnection.
  ///
  /// In en, this message translates to:
  /// **'No connection'**
  String get chatListNoConnection;

  /// No description provided for @chatActionButtonTooltipSearch.
  ///
  /// In en, this message translates to:
  /// **'Search'**
  String get chatActionButtonTooltipSearch;

  /// No description provided for @chatActionButtonTooltipFavorites.
  ///
  /// In en, this message translates to:
  /// **'Favorites'**
  String get chatActionButtonTooltipFavorites;

  /// No description provided for @chatActionButtonTooltipDownload.
  ///
  /// In en, this message translates to:
  /// **'Download'**
  String get chatActionButtonTooltipDownload;

  /// No description provided for @chatActionButtonTooltipPrintPdf.
  ///
  /// In en, this message translates to:
  /// **'Print PDF'**
  String get chatActionButtonTooltipPrintPdf;

  /// No description provided for @chatActionButtonTooltipShareWithFriends.
  ///
  /// In en, this message translates to:
  /// **'Share with Friends'**
  String get chatActionButtonTooltipShareWithFriends;

  /// No description provided for @chatActionButtonTooltipNewChat.
  ///
  /// In en, this message translates to:
  /// **'New chat'**
  String get chatActionButtonTooltipNewChat;

  /// No description provided for @chatActionButtonTooltipChatList.
  ///
  /// In en, this message translates to:
  /// **'Select Chat'**
  String get chatActionButtonTooltipChatList;

  /// Leading кнопка AppBar открывающая панель Drawer'а
  ///
  /// In en, this message translates to:
  /// **'Show drawer'**
  String get chatActionButtonTooltipShowDrawer;

  /// No description provided for @chatLabelNoChatAvailableRefresh.
  ///
  /// In en, this message translates to:
  /// **'No chats available. Please refresh or create a new chat.'**
  String get chatLabelNoChatAvailableRefresh;

  /// No description provided for @chatButtonRefreshChats.
  ///
  /// In en, this message translates to:
  /// **'Refresh chats'**
  String get chatButtonRefreshChats;

  /// No description provided for @chatButtonCreateNewChat.
  ///
  /// In en, this message translates to:
  /// **'Create new chat'**
  String get chatButtonCreateNewChat;

  /// No description provided for @chatContextMenuCopyMessage.
  ///
  /// In en, this message translates to:
  /// **'Copy text'**
  String get chatContextMenuCopyMessage;

  /// ⚠️⚠️⚠️ Каждая новая строка - следующее сообщение,
  /// о том что ответ задерживается. ⚠️⚠️⚠️
  ///
  /// In en, this message translates to:
  /// **'Typing...\nJust a moment...'**
  String get chatStatusProcessingMessages;

  /// No description provided for @chatNoConnectionLabel.
  ///
  /// In en, this message translates to:
  /// **'Please check your internet connection'**
  String get chatNoConnectionLabel;

  /// No description provided for @chatErrorMessageAlreadyProcessed.
  ///
  /// In en, this message translates to:
  /// **'The message is already being processed right now.'**
  String get chatErrorMessageAlreadyProcessed;

  /// No description provided for @chatErrorMessageTooLong.
  ///
  /// In en, this message translates to:
  /// **'Message is too long.'**
  String get chatErrorMessageTooLong;

  /// No description provided for @chatRemoveAttachmentTooltip.
  ///
  /// In en, this message translates to:
  /// **'Remove attachment'**
  String get chatRemoveAttachmentTooltip;

  /// Сообщение отображаемое на статус-ошибку с BE.
  ///
  /// In en, this message translates to:
  /// **'Failed to process message'**
  String get chatStatusFailedMessage;

  /// Подсказка для кнопки открывающей боттом шит по экспорту саммари в PDF
  ///
  /// In en, this message translates to:
  /// **'Export to PDF'**
  String get chatActionButtonTooltipExportSummary;
}

class _ChatLocalizationDelegate
    extends LocalizationsDelegate<ChatLocalization> {
  const _ChatLocalizationDelegate();

  @override
  Future<ChatLocalization> load(Locale locale) {
    return SynchronousFuture<ChatLocalization>(lookupChatLocalization(locale));
  }

  @override
  bool isSupported(Locale locale) =>
      <String>['de', 'en', 'es', 'ru'].contains(locale.languageCode);

  @override
  bool shouldReload(_ChatLocalizationDelegate old) => false;
}

ChatLocalization lookupChatLocalization(Locale locale) {
  // Lookup logic when only language code is specified.
  switch (locale.languageCode) {
    case 'de':
      return ChatLocalizationDe();
    case 'en':
      return ChatLocalizationEn();
    case 'es':
      return ChatLocalizationEs();
    case 'ru':
      return ChatLocalizationRu();
  }

  throw FlutterError(
      'ChatLocalization.delegate failed to load unsupported locale "$locale". This is likely '
      'an issue with the localizations generation tool. Please file an issue '
      'on GitHub with a reproducible sample app and the gen-l10n configuration '
      'that was used.');
}
