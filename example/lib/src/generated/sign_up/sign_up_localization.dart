// This file is generated by the Google Sheets localization tool. Do not edit manually.
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:intl/intl.dart' as intl;

import 'sign_up_localization_de.dart';
import 'sign_up_localization_en.dart';
import 'sign_up_localization_es.dart';
import 'sign_up_localization_ru.dart';

// ignore_for_file: type=lint

/// Callers can lookup localized strings with an instance of SignUpLocalization
/// returned by `SignUpLocalization.of(context)`.
///
/// Applications need to include `SignUpLocalization.delegate()` in their app's
/// `localizationDelegates` list, and the locales they support in the app's
/// `supportedLocales` list. For example:
///
/// ```dart
/// import 'sign_up/sign_up_localization.dart';
///
/// return MaterialApp(
///   localizationsDelegates: SignUpLocalization.localizationsDelegates,
///   supportedLocales: SignUpLocalization.supportedLocales,
///   home: MyApplicationHome(),
/// );
/// ```
///
/// ## Update pubspec.yaml
///
/// Please make sure to update your pubspec.yaml to include the following
/// packages:
///
/// ```yaml
/// dependencies:
///   # Internationalization support.
///   flutter_localizations:
///     sdk: flutter
///   intl: any # Use the pinned version from flutter_localizations
///
///   # Rest of dependencies
/// ```
///
/// ## iOS Applications
///
/// iOS applications define key application metadata, including supported
/// locales, in an Info.plist file that is built into the application bundle.
/// To configure the locales supported by your app, you’ll need to edit this
/// file.
///
/// First, open your project’s ios/Runner.xcworkspace Xcode workspace file.
/// Then, in the Project Navigator, open the Info.plist file under the Runner
/// project’s Runner folder.
///
/// Next, select the Information Property List item, select Add Item from the
/// Editor menu, then select Localizations from the pop-up menu.
///
/// Select and expand the newly-created Localizations item then, for each
/// locale your application supports, add a new item and select the locale
/// you wish to add from the pop-up menu in the Value field. This list should
/// be consistent with the languages listed in the SignUpLocalization.supportedLocales
/// property.
abstract class SignUpLocalization {
  SignUpLocalization(String locale)
      : localeName = intl.Intl.canonicalizedLocale(locale.toString());

  final String localeName;

  static SignUpLocalization of(BuildContext context) {
    return Localizations.of<SignUpLocalization>(context, SignUpLocalization)!;
  }

  static const LocalizationsDelegate<SignUpLocalization> delegate =
      _SignUpLocalizationDelegate();

  /// A list of this localizations delegate along with the default localizations
  /// delegates.
  ///
  /// Returns a list of localizations delegates containing this delegate along with
  /// GlobalMaterialLocalizations.delegate, GlobalCupertinoLocalizations.delegate,
  /// and GlobalWidgetsLocalizations.delegate.
  ///
  /// Additional delegates can be added by appending to this list in
  /// MaterialApp. This list does not have to be used at all if a custom list
  /// of delegates is preferred or required.
  static const List<LocalizationsDelegate<dynamic>> localizationsDelegates =
      <LocalizationsDelegate<dynamic>>[
    delegate,
    GlobalMaterialLocalizations.delegate,
    GlobalCupertinoLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
  ];

  /// A list of this localizations delegate's supported locales.
  static const List<Locale> supportedLocales = <Locale>[
    Locale('de'),
    Locale('en'),
    Locale('es'),
    Locale('ru')
  ];

  /// No description provided for @title.
  ///
  /// In en, this message translates to:
  /// **'Sign In'**
  String get title;

  /// No description provided for @logIn.
  ///
  /// In en, this message translates to:
  /// **'Log in'**
  String get logIn;

  /// No description provided for @password.
  ///
  /// In en, this message translates to:
  /// **'Password'**
  String get password;

  /// No description provided for @changeNumber.
  ///
  /// In en, this message translates to:
  /// **'Change number'**
  String get changeNumber;

  /// No description provided for @forgotPassword.
  ///
  /// In en, this message translates to:
  /// **'Forgot Password?'**
  String get forgotPassword;

  /// No description provided for @forgotPasswordEnterYourEmailAddress.
  ///
  /// In en, this message translates to:
  /// **'Enter your email address, and we’ll send you a link to reset your password.'**
  String get forgotPasswordEnterYourEmailAddress;

  /// No description provided for @rememberYourPasswordQuestion.
  ///
  /// In en, this message translates to:
  /// **'Remember your password?'**
  String get rememberYourPasswordQuestion;

  /// No description provided for @backToLoginButton.
  ///
  /// In en, this message translates to:
  /// **'I have a password'**
  String get backToLoginButton;

  /// No description provided for @continueButton.
  ///
  /// In en, this message translates to:
  /// **'Continue'**
  String get continueButton;

  /// No description provided for @passwordResetEmailSentSnackBar.
  ///
  /// In en, this message translates to:
  /// **'Password reset email sent'**
  String get passwordResetEmailSentSnackBar;

  /// No description provided for @resetPasswordButton.
  ///
  /// In en, this message translates to:
  /// **'Reset password'**
  String get resetPasswordButton;

  /// No description provided for @confirmCodeButton.
  ///
  /// In en, this message translates to:
  /// **'Confirm code'**
  String get confirmCodeButton;

  /// No description provided for @startUsingDoctorinaTodaySubtitle.
  ///
  /// In en, this message translates to:
  /// **'Start using Doctorina today'**
  String get startUsingDoctorinaTodaySubtitle;

  /// Разделитель ---ИЛИ--- между кнопками
  ///
  /// In en, this message translates to:
  /// **'OR'**
  String get orDivider;

  /// No description provided for @enterPasswordForEmailHint.
  ///
  /// In en, this message translates to:
  /// **'Enter your password'**
  String get enterPasswordForEmailHint;

  /// No description provided for @showPasswordHint.
  ///
  /// In en, this message translates to:
  /// **'Show password'**
  String get showPasswordHint;

  /// No description provided for @obscurePasswordHint.
  ///
  /// In en, this message translates to:
  /// **'Obscure password'**
  String get obscurePasswordHint;

  /// No description provided for @clearLoginTooltip.
  ///
  /// In en, this message translates to:
  /// **'Clear login'**
  String get clearLoginTooltip;

  /// No description provided for @emailOrPhoneLabel.
  ///
  /// In en, this message translates to:
  /// **'Email or phone'**
  String get emailOrPhoneLabel;

  /// No description provided for @emailOrPhoneLabelExample.
  ///
  /// In en, this message translates to:
  /// **'name@gmail.com or +1234567890'**
  String get emailOrPhoneLabelExample;

  /// No description provided for @emailOrPhoneHint.
  ///
  /// In en, this message translates to:
  /// **'Enter email or phone number'**
  String get emailOrPhoneHint;

  /// No description provided for @pleaseAcceptTheAgreementsToContinueSnackBar.
  ///
  /// In en, this message translates to:
  /// **'Please accept the agreements to continue.'**
  String get pleaseAcceptTheAgreementsToContinueSnackBar;

  /// На конце запятая
  ///
  /// In en, this message translates to:
  /// **'I consent to the processing of personal data,'**
  String get consentToTheProcessingOfPersonalData;

  /// No description provided for @consentTheUseOf.
  ///
  /// In en, this message translates to:
  /// **'the use of'**
  String get consentTheUseOf;

  /// No description provided for @consentCookies.
  ///
  /// In en, this message translates to:
  /// **'cookies'**
  String get consentCookies;

  /// В начале запятая
  ///
  /// In en, this message translates to:
  /// **', agree to the'**
  String get consentAgreeToThe;

  /// No description provided for @consentTermsAndConditions.
  ///
  /// In en, this message translates to:
  /// **'terms and conditions'**
  String get consentTermsAndConditions;

  /// В начале запятая
  ///
  /// In en, this message translates to:
  /// **', and acknowledge the '**
  String get consentAndAcknowledgeThe;

  /// No description provided for @consentPrivacyPolicy.
  ///
  /// In en, this message translates to:
  /// **'privacy policy'**
  String get consentPrivacyPolicy;

  /// Точка на конце соглашения
  ///
  /// In en, this message translates to:
  /// **'.'**
  String get consentDot;

  /// No description provided for @acknowledgeMyConsultation.
  ///
  /// In en, this message translates to:
  /// **'I acknowledge that my consultation is with an AI and not a licensed medical professional.'**
  String get acknowledgeMyConsultation;

  /// Диалог выхода, заголовок
  ///
  /// In en, this message translates to:
  /// **'Log out'**
  String get logOutDialogTitle;

  /// Диалог выхода, текст
  ///
  /// In en, this message translates to:
  /// **'Are you sure to log out?'**
  String get logOutDialogContent;

  /// Диалог выхода, кнопка отмены
  ///
  /// In en, this message translates to:
  /// **'Cancel'**
  String get logOutDialogCancelButton;

  /// Диалог выхода, кнопка выйти
  ///
  /// In en, this message translates to:
  /// **'Yes, log out'**
  String get logOutDialogLogOutButton;
}

class _SignUpLocalizationDelegate
    extends LocalizationsDelegate<SignUpLocalization> {
  const _SignUpLocalizationDelegate();

  @override
  Future<SignUpLocalization> load(Locale locale) {
    return SynchronousFuture<SignUpLocalization>(
        lookupSignUpLocalization(locale));
  }

  @override
  bool isSupported(Locale locale) =>
      <String>['de', 'en', 'es', 'ru'].contains(locale.languageCode);

  @override
  bool shouldReload(_SignUpLocalizationDelegate old) => false;
}

SignUpLocalization lookupSignUpLocalization(Locale locale) {
  // Lookup logic when only language code is specified.
  switch (locale.languageCode) {
    case 'de':
      return SignUpLocalizationDe();
    case 'en':
      return SignUpLocalizationEn();
    case 'es':
      return SignUpLocalizationEs();
    case 'ru':
      return SignUpLocalizationRu();
  }

  throw FlutterError(
      'SignUpLocalization.delegate failed to load unsupported locale "$locale". This is likely '
      'an issue with the localizations generation tool. Please file an issue '
      'on GitHub with a reproducible sample app and the gen-l10n configuration '
      'that was used.');
}
